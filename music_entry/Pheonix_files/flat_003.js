/*!
 * Copyright (c) 2017 Flat - Tutteo Ltd. <hello@flat.io>
 * https://flat.io
 */

angular.module("flat.offline.services",["ngLodash","flat.indexedDB","flat.dashboard.services","flat.editor.services"]),function(){"use strict";function a(a,b,c,d,e,f){function g(b){return a(function(a,e){b.length>0?d.scoreComments.putBatch(b).then(function(){c.debug("[ScoreCommentIDB] UPDATE BATCH: Cache updated",b.slice(0,25)),a(b)}).catch(function(a){c.warn("[ScoreCommentIDB] UPDATE BATCH: Error on put to cache",a),e(a)}):(c.debug("[ScoreCommentIDB] UPDATE BATCH: No comments to cache"),a(b))})}function h(b,e){return a(function(a,h){var j=e.cacheLimit||p;f.query(b).$promise.then(function(d){if(c.debug("[ScoreCommentIDB] QUERY: return remote data",d),e.cache===!0){var f=[],h=d.slice(0,j);i(b,e).then(function(a){f=a}).finally(function(){h=d.slice(0,j),g(_.unionBy(h,f,"id")).finally(function(){a(d)})})}else a(d)}).catch(function(a){403===a.status&&d.scoreComments.removeForScore(b.score),c.warn("[ScoreCommentIDB] QUERY: Error on query from remote",a),h(a)})})}function i(b){return a(function(a,e){d.scoreComments.query(b.score).then(function(b){!_.isUndefined(b)&&b.length?(c.debug("[ScoreCommentIDB] QUERY: return cached data",b),a(b)):e(b)}).catch(function(a){c.warn("[ScoreCommentIDB] QUERY: Error on query from cache",a),e(a)})})}function j(a,b){return b=b||{},b.broadcastMsg=b.broadcastMsg||"IDBObjectUpdate.ScoreComment",c.info("[ScoreCommentIDB] QUERY: ",{params:a,options:b}),e.resolve(a,b,h,i)}function k(b){return a(function(a,e){var g;g=b.id?f.update({score:b.score,id:b.id,sharingKey:b.sharingKey},b):f.add({sharingKey:b.sharingKey},b),g.$promise.then(function(b){c.debug("[ScoreCommentIDB] PUT: Remote updated",b),d.scoreComments.put(b).then(function(){c.debug("[ScoreCommentIDB] PUT: Cache updated",b)}).catch(function(a){c.warn("[ScoreCommentIDB] PUT: Error on put to cache",a)}).finally(function(){a(b)})}).catch(function(a){c.warn("[ScoreCommentIDB] PUT: Error on put to remote",a),e(a)})})}function l(b,e){return a(function(a,g){f.update(b,e).$promise.then(function(b){c.debug("[ScoreCommentIDB] UPDATE: Remote updated",b),d.scoreComments.put(b).then(function(){c.debug("[ScoreCommentIDB] UPDATE: Cache updated",b)}).catch(function(a){c.warn("[ScoreCommentIDB] UPDATE: Error on put to cache",a)}).finally(function(){a(b)})}).catch(function(a){c.warn("[ScoreCommentIDB] UPDATE: Error on put to remote",a),g(a)})})}function m(b){return a(function(a,e){f.delete(b).$promise.then(function(f){c.debug("[ScoreCommentIDB] DELETE: Remote updated",f),d.scoreComments.remove(b.id).then(function(b){c.debug("[ScoreCommentIDB] DELETE: Remote updated",f),a(b)}).catch(function(a){c.warn("[ScoreCommentIDB] DELETE: Error on delete from cache",a),e(a)})}).catch(function(a){c.warn("[ScoreCommentIDB] DELETE: Error on delete from remote",a),e(a)})})}function n(b){return a(function(a,e){f.resolve(b).$promise.then(function(b){c.debug("[ScoreCommentIDB] RESOLVE: Remote updated",b),d.scoreComments.put(b).then(function(){c.debug("[ScoreCommentIDB] RESOLVE: Cache updated",b)}).catch(function(a){c.warn("[ScoreCommentIDB] RESOLVE: Error on put to cache",a)}).finally(function(){a(b)})}).catch(function(a){c.warn("[ScoreCommentIDB] RESOLVE: Error on put to remote",a),e(a)})})}function o(b){return a(function(a,e){f.unresolve(b).$promise.then(function(b){c.debug("[ScoreCommentIDB] UNRESOLVE: Remote updated",b),d.scoreComments.put(b).then(function(){c.debug("[ScoreCommentIDB] UNRESOLVE: Cache updated",b)}).catch(function(a){c.warn("[ScoreCommentIDB] UNRESOLVE: Error on put to cache",a)}).finally(function(){a(b)})}).catch(function(a){c.warn("[ScoreCommentIDB] UNRESOLVE: Error on put to remote",a),e(a)})})}var p=25;return{query:j,put:k,update:l,remove:m,resolve:n,unresolve:o}}angular.module("flat.offline.services").factory("ScoreCommentIDB",a),a.$inject=["$q","$rootScope","IDBLogger","PersistenceService","RequestStrategies","ScoreComment"]}(),function(){"use strict";function a(a,b,c,d,e,f,g,h,i,j){function k(b){if(!b||!c.account||!c.account.id)return!1;if(b.rights&&b.rights.aclWrite)return!0;if(!b.collaborators)return!1;for(var d=0;d<b.collaborators.length;d++){var e=b.collaborators[d],f=!1;if(e.user&&a.isString(e.user)?f=e.user:e.user&&a.isObject(e.user)&&a.isString(e.user.id)&&(f=e.user.id),f&&f===c.account.id)return!0}return!1}function l(){return b(function(b,c){e.scores.query().then(function(c){b(a.map(c,"id"))}).catch(c)})}function m(){return b(function(b){var c="sw-toolbox-flat-soundfonts",d="store",e=[],f=function(){b(e)};Dexie.exists(c).then(function(b){if(b){var g=new Dexie(c);g.open().then(function(){var b=a.findIndex(g.tables,{name:d});b>=0?g.table(d).each(function(a){e.push(a.url.split("/").pop().split("-")[0])}).finally(f):f()}).catch(f)}else f()}).catch(f)})}function n(b){var c,e,f,g=10,h=[],i={};if("undefined"!=typeof Dacapo){for(var j=0;j<b.length&&h.length<g;j++){f=b[j]["score-partwise"]["part-list"]["score-part"];for(var k=0;k<f.length&&h.length<g;k++)e=f[k]["midi-instrument"]["midi-program"],c=Dacapo.Utils.InstrumentConf[e],c&&(i[e]||h.push(c.id),i[e]=!0)}d.debug("[ScoreIDB] Fetch Soundfonts:",h);var l=new Dacapo.SFBuffer;m().then(function(b){a.forEach(h.slice(0,g),function(c){a.findIndex(b,c)===-1&&l.downloadSoundfont(c)})})}}function o(c){return b(function(d){var f=[],h=function(a){a.revisions&&a.revisions.length>0&&g.get({score:a.id,revision:a.revisions[0].id},{strategy:"cacheFirst",cache:!0,update:!1}).then(function(a){f.push(a)}).finally(function(){e.scores.put(a)})};b.all(a.map(c,function(a){return r({id:a},{cache:!0}).then(h)})).finally(function(){d(f)})})}function p(a,c){return b(function(b,f){j.get(a).$promise.then(function(a){d.debug("[ScoreIDB] GET: return remote data",a),c.cache===!0&&k(a)?e.scores.put(a).then(function(){d.debug("[ScoreIDB] GET: cache updated",a)}).catch(function(a){d.warn("[ScoreIDB] GET: Error on put to cache",a)}).finally(function(){b(a)}):b(a)}).catch(function(b){403!==b.status&&404!==b.status||e.scores.removeDeep(a.id),d.warn("[ScoreIDB] GET: Error on get from remote",b),f(b)})})}function q(c){return b(function(b,f){e.scores.get(c.id).then(function(c){a.isUndefined(c)?f(c):(d.debug("[ScoreIDB] GET: return cached data",c),b(c))}).catch(function(a){d.warn("[ScoreIDB] GET: Error on get from cache",a),f(a)})})}function r(a,b){return b=b||{},b.broadcastMsg=b.broadcastMsg||"IDBObjectUpdate.Score",d.info("[ScoreIDB] GET: ",{params:a,options:b}),f.resolve(a,b,p,q)}function s(a){return b(function(b,c){j.create(a,function(a){d.debug("[ScoreIDB] CREATE: Remote updated",a),e.scores.put(a).then(function(){d.debug("[ScoreIDB] CREATE: Cache updated",a)}).catch(function(a){d.warn("[ScoreIDB] CREATE: Error on put to cache",a)}).finally(function(){b(a)})},function(a){d.warn("[ScoreIDB] CREATE: Error on create from remote",a),c(a)})})}function t(a){return b(function(b,c){j.put(a,function(a){d.debug("[ScoreIDB] PUT: Remote updated",a),e.scores.put(a).then(function(){d.debug("[ScoreIDB] PUT: Cache updated",a),b(a)}).catch(function(a){d.warn("[ScoreIDB] PUT: Error on put from cache",a),c(a)})},function(a){d.warn("[ScoreIDB] PUT: Error on delete from remote",a),c(a)})})}function u(a){return b(function(b,f){j.delete(a,function(f){d.debug("[ScoreIDB] DELETE: Remote updated",f),c.$broadcast("ObjectDelete.Score",a.id),e.scores.removeDeep(a.id).then(function(){d.debug("[ScoreCommentIDB] DELETE: Cache updated",f)}).catch(function(a){d.warn("[ScoreIDB] DELETE: Error on delete from cache",a)}).finally(function(){b(a.id)})},function(a){d.warn("[ScoreIDB] DELETE: Error on delete from remote",a),f(a)})})}return{get:r,create:s,put:t,remove:u,fetchMetaFor:o,fetchSoundfonts:n,getCachedScoresIds:l}}angular.module("flat.offline.services").factory("ScoreIDB",a),a.$inject=["_","$q","$rootScope","IDBLogger","PersistenceService","RequestStrategies","ScoreRevisionIDB","ScoreCommentIDB","Me","ScoreV2"]}(),function(){"use strict";function a(a,b,c,d,e,f){function g(b,d){return d=d||{},c.info("[ScoreRevisionIDB] CREATE: ",{params:b,options:d}),a(function(a,e){f.create({score:b.score},{data:b.data,autosave:b.autosave,description:b.description}).$promise.then(function(e){c.debug("[ScoreRevisionIDB] CREATE: add new revision to remote",e),console.log("scoreRevision: ",e),d.cache===!0?k(e).finally(function(){var c=JSON.parse(b.data);c._revisionId=e.id,c._scoreId=e.score,console.log("scoreRevisionData: ",c),o(c).finally(function(){a(e)})}):a(e)}).catch(function(a){c.warn("[ScoreRevisionIDB] CREATE: Error on create to remote",a),e(a)})})}function h(a,b){return b=b||{},c.info("[ScoreRevisionIDB] GET: ",{params:a,options:b}),e.resolve(a,b,i,j)}function i(b,d){return a(function(a,e){f.get(b,function(b){c.debug("[ScoreRevisionIDB] GET: return remote data",b),d.cache===!0?k(b).finally(function(){a(b)}):a(b)},function(a){c.warn("[ScoreRevisionIDB] GET: Error on get from remote",a),e(a)})})}function j(b){return a(function(a,e){d.scoreRevisions.get(b.revision).then(function(b){_.isUndefined(b)?(c.warn("[ScoreRevisionIDB] GET: Error scoreRevision not found in cache",b),e(b)):(c.debug("[ScoreRevisionIDB] GET: return cached data",b),a(b))}).catch(function(a){c.warn("[ScoreRevisionIDB] GET: Error on get from cache",a),e(a)})})}function k(b){return a(function(a,e){d.scoreRevisions.put(b).then(function(){c.debug("[ScoreRevisionIDB] UPDATE CACHE: cache updated",b),a(b)}).catch(function(a){c.warn("[ScoreRevisionIDB] UPDATE CACHE: Error on put to cache",a),e(a)})})}function l(a,b){return b=b||{},c.info("[ScoreRevisionIDB] GET DATA: ",{params:a,options:b}),e.resolve(a,b,m,n)}function m(b,d){return a(function(a,e){f.getData(b,function(e){c.debug("[ScoreRevisionIDB] GET DATA: return remote data",e),d.cache===!0?(e._revisionId=b.revision,e._scoreId=b.score,o(e).finally(function(){a(e)})):a(e)},function(a){c.warn("[ScoreRevisionIDB] GET DATA: Error on get from remote",a),e(a)})})}function n(b){return a(function(a,e){d.scoreRevisionsData.get(b.revision).then(function(b){_.isUndefined(b)?(c.warn("[ScoreRevisionIDB] GET DATA: Error scoreRevisionData not found in cache",b),e(b)):(c.debug("[ScoreRevisionIDB] GET DATA: return cached data",b),a(b))}).catch(function(a){c.warn("[ScoreRevisionIDB] GET DATA: Error on get from cache",a),e(a)})})}function o(b){return a(function(a,e){b._revisionId&&b._scoreId?d.scoreRevisionsData.put(b).then(function(){c.debug("[ScoreRevisionIDB] UPDATE DATA CACHE: cache updated",b),a(b)}).catch(function(a){c.warn("[ScoreRevisionIDB] UPDATE DATA CACHE: Error on put to cache",a),e(a)}):(c.debug("[ScoreRevisionIDB] UPDATE DATA CACHE: Missing index key",b),e(b))})}function p(b,d){return a(function(a,e){q(b,d).then(function(b){c.debug("[ScoreRevisionIDB] GET LAST: return last revision data",b[0]),b.length>0&&b[0].id&&a(b[0]),e("Revision not found")}).catch(function(a){c.warn("[ScoreRevisionIDB] GET LAST: Error on query from remote",a),e(a)})})}function q(a,b){return b=b||{},b.broadcastMsg=b.broadcastMsg||"IDBObjectUpdate.ScoreRevision",c.info("[ScoreRevisionIDB] QUERY: ",{params:a,options:b}),e.resolve(a,b,r,s)}function r(b,e){return a(function(a,g){var h=e.cacheLimit||u;f.query(b).$promise.then(function(d){if(c.debug("[ScoreRevisionIDB] QUERY: return remote data",d),e.cache===!0){var f=[],g=d.slice(0,h);s(b,e).then(function(a){f=a}).finally(function(){g=d.slice(0,h),t(_.unionBy(g,f,"id")).finally(function(){a(d)})})}else a(d)}).catch(function(a){403===a.status&&d.scoreRevisions.removeForScore(b.score),c.warn("[ScoreRevisionIDB] QUERY: Error on query from remote",a),g(a)})})}function s(b){return a(function(a,e){d.scoreRevisions.query(b.score).then(function(b){!_.isUndefined(b)&&b.length?(c.debug("[ScoreRevisionIDB] QUERY: return cached data",b),a(b)):e(b)}).catch(function(a){c.warn("[ScoreRevisionIDB] QUERY: Error on query from cache",a),e(a)})})}function t(b){return a(function(a,e){b.length>0?d.scoreRevisions.putBatch(b).then(function(){c.debug("[ScoreRevisionIDB] UPDATE BATCH: Cache updated",b.slice(0,u)),a(b)}).catch(function(a){c.warn("[ScoreRevisionIDB] UPDATE BATCH: Error on put to cache",a),e(a)}):(c.debug("[ScoreRevisionIDB] UPDATE BATCH: No revisions to cache"),a(b))})}var u=25;return{create:g,get:h,getLastRevision:p,getData:l,query:q}}angular.module("flat.offline.services").factory("ScoreRevisionIDB",a),a.$inject=["$q","$rootScope","IDBLogger","PersistenceService","RequestStrategies","ScoreRevisionV2"]}(),function(){"use strict";function a(a,b,c,d,e,f,g,h,i){function j(c,f){return b(function(b,g){i.scores(c).$promise.then(function(g){if(d.debug("[UserScoresIDB] QUERY: return remote data",g),f.isCurrentUser&&f.cache===!0){var h=[],i=a.map(g.slice(0,m),function(a){return a.offline=!0,a});k(c,f).then(function(a){h=a}).finally(function(){e.scores.putBatch(a.unionBy(i,h,"id")).finally(function(){b(g)})})}else b(g)}).catch(function(a){d.warn("[UserScoresIDB] QUERY: Error on query from remote",a),g(a)})})}function k(c,f){return b(function(b,c){f.isCurrentUser?e.scores.queryByUser(f.session.id).then(function(e){!a.isUndefined(e)&&e.length?(d.debug("[UserScoresIDB] QUERY: return cached data",e),b(e)):(d.warn("[UserScoresIDB] QUERY: Error userScores not found in cache",e),c(e))}).catch(function(a){d.warn("[UserScoresIDB] QUERY: Error on get from cache",a),c(a)}):c(null)})}function l(a,c){return b(function(b,e){c=c||{},c.broadcastMsg=c.broadcastMsg||"IDBObjectUpdate.UserScores",c.isCurrentUser=!1,d.info("[UserScoresIDB] QUERY: ",{params:a,options:c}),g.get().$promise.then(function(b){c.session=b,c.isCurrentUser=a.user===b.id||a.user===b.username||"me"===a.user}).finally(function(){f.resolve(a,c,j,k).then(b).catch(e)})})}var m=15;return{query:l}}angular.module("flat.offline.services").factory("UserScoresIDB",a),a.$inject=["_","$q","$rootScope","IDBLogger","PersistenceService","RequestStrategies","Me","ScoreIDB","UserV2"]}();
//# sourceMappingURL=flat.offline.min.js.map